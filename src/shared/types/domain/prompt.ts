/**
 * Types related to the core domain concept of a Prompt, including its metadata,
 * variables, and execution results.
 */
import { PromptFragment } from './fragment';

/**
 * Represents a variable defined within a prompt's metadata.
 * These act as placeholders to be filled during prompt execution.
 */
export interface PromptVariable {
    /**
     * The name of the variable, typically enclosed in double curly braces (e.g., "{{INPUT_TEXT}}").
     * Stored with braces in the database.
     */
    name: string;

    /** A description explaining the purpose or expected content of the variable. */
    role?: string;

    /** A more detailed description, potentially used for documentation (optional). */
    description?: string;

    /**
     * Flag indicating whether the user *must* provide a value for this variable during execution.
     * If false (or undefined), the variable is considered required.
     */
    optional_for_user?: boolean;

    /**
     * Explicit flag indicating if the variable is required. Often the inverse of `optional_for_user`.
     * Included for potential clarity or alternative metadata formats.
     * @deprecated Use `!optional_for_user` for required status.
     */
    required?: boolean;

    /** A default value to use if the user does not provide one (optional). */
    default?: string;

    /** The expected data type of the variable (e.g., 'string', 'number', 'file') (optional). */
    type?: string;

    /**
     * The currently assigned value for this variable in a specific context (e.g., before execution).
     * This can be a direct value, an environment variable reference ("Env: VAR_NAME"),
     * or a fragment reference ("Fragment: category/name").
     */
    value?: string;
}

/**
 * Represents the complete metadata associated with a prompt.
 * This structure is typically stored in the `metadata.yml` file and the database.
 */
export interface PromptMetadata {
    /** The unique database identifier for the prompt (assigned on creation). */
    id?: string; // Typically number from DB, but string for flexibility

    /** The user-friendly title of the prompt. */
    title: string;

    /** The primary category used for organizing the prompt. */
    primary_category: string;

    /** An array of secondary category names or tags for further classification. */
    subcategories: string[];

    /** The name of the directory where the prompt's files (`prompt.md`, `metadata.yml`) are stored. */
    directory: string;

    /**
     * Searchable tags associated with the prompt. Can be stored as a comma-separated
     * string in the DB or an array in YAML/code.
     */
    tags: string | string[]; // Allow both string and array for flexibility

    /** A concise, one-line summary of the prompt's purpose, suitable for lists. */
    one_line_description: string;

    /** A more detailed description of the prompt's functionality and usage. */
    description: string;

    /** An array defining the variables the prompt expects as input. */
    variables: PromptVariable[];

    /** An MD5 hash of the `prompt.md` content, used for detecting changes. */
    content_hash?: string;

    /** An array linking this prompt to reusable fragments it might utilize. */
    fragments?: PromptFragment[]; // References fragments used
}

/**
 * A simplified version of prompt metadata, often used when full details
 * (like database ID or all variable values) are not needed, such as during initial creation
 * or in listings where only basic info is displayed.
 */
export interface SimplePromptMetadata {
    /** The user-friendly title of the prompt. */
    title: string;

    /** The name of the directory where the prompt's files are stored. */
    directory: string;

    /** The primary category for organization (optional during creation). */
    primary_category?: string;

    /** Secondary category names or tags (optional). */
    subcategories?: string[];

    /** A concise, one-line summary (optional during creation). */
    one_line_description?: string;

    /** A detailed description (optional). */
    description?: string;

    /** Searchable tags (optional). */
    tags?: string[];

    /** Definitions of variables the prompt uses (optional during creation). */
    variables?: PromptVariable[];

    /** MD5 hash of the prompt content (optional, often generated later). */
    content_hash?: string;

    /** Links to reusable fragments (optional). */
    fragments?: PromptFragment[];
}

/**
 * Represents the outcome of executing a prompt with an AI model.
 */
export interface PromptExecutionResult {
    /** Indicates whether the execution call succeeded without errors. */
    success: boolean;

    /** The textual response generated by the AI model, if successful. */
    response?: string;

    /** An error message if the execution failed. */
    error?: string;

    /** The time taken for the AI model to process the request, in milliseconds (optional). */
    executionTime?: number;
}

/**
 * Represents the result of synchronizing a prompt with the database.
 */
export interface PromptSyncResult {
    /** The database ID of the prompt that was synced (created or updated). */
    promptId: string;
}
